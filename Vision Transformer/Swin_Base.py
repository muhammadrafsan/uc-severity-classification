# -*- coding: utf-8 -*-
"""Swin-Base.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fKe9OBRtWtniJBQM_hwTAd8nKTXTFZiN
"""

!pip install timm

import os
import torch
import torchvision.transforms as transforms
from torch.utils.data import DataLoader, random_split, Dataset
from torchvision.datasets import ImageFolder
from sklearn.model_selection import train_test_split
import timm

dataset_path = "/kaggle/input/binary-ulcerative-colitis/Binary Ulceraive Colitis"

transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

full_dataset = ImageFolder(root=dataset_path, transform=transform)
print(f'Total images: {len(full_dataset)}')

train_size = int(0.7 * len(full_dataset))
val_size = int(0.2 * len(full_dataset))
test_size = len(full_dataset) - train_size - val_size


train_dataset, val_dataset, test_dataset = random_split(full_dataset, [train_size, val_size, test_size])

print(f'Train set: {len(train_dataset)}, Validation set: {len(val_dataset)}, Test set: {len(test_dataset)}')

batch_size =16
train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)
test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")


model = timm.create_model('swin_base_patch4_window7_224', pretrained=True, num_classes=2)

model.to(device)

trainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)
print(f"Total trainable parameters: {trainable_params}")


non_trainable_params = sum(p.numel() for p in model.parameters() if not p.requires_grad)
print(f"Total non-trainable parameters: {non_trainable_params}")


total_params = sum(p.numel() for p in model.parameters())
print(f"Total parameters: {total_params}")

memory_requirements_mb = total_params * 4 / (1024 ** 2)
print(f"Estimated memory requirements: {memory_requirements_mb:.2f} MB")

print("\nLayer-wise parameter count:")
for name, param in model.named_parameters():
    print(f"Layer: {name} | Number of parameters: {param.numel()}")

import torch.nn as nn
import torch.optim as optim
from torch.optim.lr_scheduler import ReduceLROnPlateau
import numpy as np

criterion = nn.CrossEntropyLoss()

optimizer = torch.optim.Adam(model.parameters(), lr=1e-6, weight_decay=1e-6)

scheduler = ReduceLROnPlateau(optimizer, mode='min', patience=70, verbose=True)

best_val_loss = np.inf
early_stop_count = 0
early_stop_patience = 70
checkpoint_path = "best_vit_model.pth"

def train(model, train_loader, val_loader, epochs=200):
    global best_val_loss, early_stop_count
    for epoch in range(epochs):
        model.train()
        train_loss = 0.0


        for images, labels in train_loader:
            images, labels = images.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            train_loss += loss.item()


        model.eval()
        val_loss = 0.0
        with torch.no_grad():
            for images, labels in val_loader:
                images, labels = images.to(device), labels.to(device)
                outputs = model(images)
                loss = criterion(outputs, labels)
                val_loss += loss.item()


        train_loss /= len(train_loader)
        val_loss /= len(val_loader)

        print(f"Epoch {epoch+1}, Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}")


        if val_loss < best_val_loss:
            best_val_loss = val_loss
            early_stop_count = 0
            torch.save(model.state_dict(), checkpoint_path)
            print(f"Best model saved at epoch {epoch+1}")
        else:
            early_stop_count += 1


        scheduler.step(val_loss)


        if early_stop_count >= early_stop_patience:
            print("Early stopping...")
            break

train(model, train_loader, val_loader)

model.load_state_dict(torch.load(checkpoint_path))
model.eval()


correct = 0
total = 0
with torch.no_grad():
    for images, labels in test_loader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print(f'Test Accuracy: {100 * correct / total:.2f}%')

import torch
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, matthews_corrcoef, roc_curve, auc
import matplotlib.pyplot as plt
import numpy as np


model.load_state_dict(torch.load(checkpoint_path))
model.eval()


all_labels = []
all_predictions = []
all_probs = []


with torch.no_grad():
    for images, labels in test_loader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images)


        _, predicted = torch.max(outputs.data, 1)


        all_labels.extend(labels.cpu().numpy())
        all_predictions.extend(predicted.cpu().numpy())
        all_probs.extend(outputs.softmax(dim=1)[:, 1].cpu().numpy())


accuracy = 100 * (np.array(all_predictions) == np.array(all_labels)).sum() / len(all_labels)
print(f'Test Accuracy: {accuracy:.2f}%')


print("Classification Report:")
print(classification_report(all_labels, all_predictions))


mcc = matthews_corrcoef(all_labels, all_predictions)
print(f"Matthews Correlation Coefficient (MCC): {mcc:.2f}")

roc_auc = roc_auc_score(all_labels, all_probs)
print(f"ROC AUC Score: {roc_auc:.2f}")


conf_matrix = confusion_matrix(all_labels, all_predictions)
print("Confusion Matrix:")
print(conf_matrix)


plt.figure(figsize=(6, 6))
plt.imshow(conf_matrix, interpolation='nearest', cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.colorbar()
tick_marks = np.arange(2)
plt.xticks(tick_marks, ['Class 0', 'Class 1'], rotation=45)
plt.yticks(tick_marks, ['Class 0', 'Class 1'])
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()


fpr, tpr, _ = roc_curve(all_labels, all_probs)
roc_auc_val = auc(fpr, tpr)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='blue', lw=2, label=f'ROC curve (AUC = {roc_auc_val:.2f})')
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC AUC Curve")
plt.legend(loc="lower right")
plt.show()

